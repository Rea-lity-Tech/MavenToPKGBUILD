#!/usr/bin/env ruby

require 'optparse'

require '../lib/MavenToPKGBUILD'



options = {}
op = OptionParser.new do |opts|
  opts.banner = "Usage: pkg-maven file.yaml [name/all] [options]"

  opts.on("-f", "--full", "Fetch all dependencies") do |v|
    options[:full] = v
  end

  opts.on("-c", "--compact", "Put all dependencies with the jar") do |v|
    options[:compact] = v
  end

  opts.on("-aARCH", "--arch=ARCH", "Selected architure, x86_64 by default.") do |n|
    options[:arch] = n
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end
op.parse!

if(ARGV.size <= 1)
  puts op
  exit
end

# p options
# p ARGV

include MavenToPKGBUILD

arch = "x86_64"
arch = options[:arch] unless options[:arch].nil? 

full = false
full = options[:full] unless options[:full].nil?

compact = false
compact = options[:compact] unless options[:compact].nil?

if(ARGV[0].end_with? '.yaml' or ARGV[0].end_with? ".yml")
  files = YAML.load_file ARGV[0]

  arch = ARGV[2] unless  ARGV[2].nil?
  
  # case 1: build all.
  if(ARGV[1].eql? "all")

    ## Filter the non-platform deps from javacpp-presets

    without_platform = files.map do |dep|
      next if files.has_key?(dep[0]+"-platform")
      dep[1]
    end.compact!
    ## reject the empty ones created by next
    
    without_platform.each{ |pkg| puts "BUILD" + pkg.to_s ; build_pkg(pkg, arch, full, compact) }
    return
  end
  
  # case 2: build a specific one
  pkg = files[ARGV[1]]
  unless pkg.nil?
    build_pkg(pkg, arch, full, compact)
    return
  end

  return
end
  
# case 3: build from command line.
if(ARGV.size < 3)
  puts "Not enough arguments:  name groupid version [artifactId]"
  return
end

name = ARGV[0]         # redis
groupid = ARGV[1]      # redis.clients
version = ARGV[2]      # 2.9.0
artifactid = name  

arch = ARGV[3] unless  ARGV[3].nil?

#artifactid = ARGV[3] if ARGV.size > 3 # jedis

# build it !
build(name, groupid, version, artifactid, arch, full, compact)
