#!/usr/bin/env ruby
require 'optparse'
require 'MavenToPKGBUILD'

include MavenToPKGBUILD

options = {}
@op = OptionParser.new do |opts|
  opts.banner = <<-USAGE
Usage: pkg-maven file.yaml [name/all] [options]
or   : pkg-maven artifactId groupId version [options]
USAGE
  
  opts.on("-f", "--full", "Fetch all dependencies") do |v|
    options[:full] = v
  end

  opts.on("-c", "--compact", "Put all dependencies with the jar") do |v|
    options[:compact] = v
  end

  opts.on("-aARCH", "--arch=ARCH", "Selected architure, x86_64 by default.") do |n|
    options[:arch] = n
  end

  opts.on("-vVERSION", "--version=VERSION", "Minor version, default is 1.") do |n|
    options[:version] = n
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts
    exit
  end
end
@op.parse!

def error;  puts @op ; exit ; end
def yaml?(s); s.end_with? 'yaml' or s.end_with? 'yml' ; end


error if ARGV.size <= 1

if yaml?(ARGV[0])
  files = YAML.load_file ARGV[0]

  # case 1: build all.
  if(ARGV[1].eql? "all")

    ## Filter the non-platform deps from javacpp-presets
    without_platform = files.map do |dep|
      next if files.has_key?(dep[0]+"-platform")
      dep[1]["name"] = dep[0]
      dep[1]
    end.compact!
    ## reject the empty ones created by next
    
    without_platform.each{ |pkg|  build_pkg(pkg, options) }
    return
  end
  
  # case 2: build a specific one
  pkg = files[ARGV[1]]
  unless pkg.nil?
    pkg["name"] = ARGV[1]
    build_pkg(pkg, options)
    return
  end
  return
end
  
# case 3: build from command line.
if(ARGV.size < 3)
  puts "Not enough arguments:  name groupid version [artifactId]"
  return
end

artifactId = ARGV[0]         # redis
groupid = ARGV[1]      # redis.clients
version = ARGV[2]      # 2.9.0
name = artifactId

build(name, groupid, version, artifactId, options)
